c      SUBROUTINE c2_d2(d_i0,d_x2,d_y2,k_i0_offset,k_x2_offset,k_y2_offse
      SUBROUTINE tce_uss_T2_R2(d_x2,d_y2,d_i0,k_x2_offset,k_y2_offset,
     &k_i0_offset,iref,jref)
C     $Id: tce.py,v 1.10 2002/12/01 21:37:34 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_yx + = 1/4 * Sum ( h4 h3 p2 p1 ) * y+ ( h3 h4 p1 p2 )_y * x ( p1 p2 h3 h4 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_y2
      INTEGER k_y2_offset
      INTEGER d_x2
      INTEGER k_x2_offset
      integer iref,jref
      logical nodezero
      nodezero = (ga_nodeid().eq.0)
!      if(nodezero)write(6,*)"calling tce_uss_T2_R2_1",iref,jref
  
      CALL tce_uss_T2_R2_1(d_y2,k_y2_offset,d_x2,k_x2_offset,d_i0,
     1 k_i0_offset,iref,jref)
      RETURN
      END
      SUBROUTINE tce_uss_T2_R2_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     1 k_c_offset,iref,jref)
C     $Id: tce.py,v 1.10 2002/12/01 21:37:34 sohirata Exp $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_yx + = 1/4 * Sum ( h4 h3 p2 p1 ) * y+ ( h3 h4 p1 p2 )_y * x ( p1 p2 h3 h4 )_x
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_mrcc.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h3b
      INTEGER h4b
      INTEGER p1b
      INTEGER p2b
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperh(2)
      INTEGER isuperh
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c
      INTEGER k_c
      INTEGER counter,i,j,k,l
      integer iref,jref
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      logical nodezero
!
            integer noabn,nvabn
!
!
         noabn = nblcks(1,jref)+nblcks(2,jref)
         nvabn = nblcks(3,jref)+nblcks(4,jref)
!
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      nodezero = (ga_nodeid().eq.0)
      IF (next.eq.count) THEN
      IF (0 .eq. ieor(irrep_y,irrep_x)) THEN
      dimc = 1
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('c2_d2_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h3b = 1,noabn
      DO h4b = h3b,noabn
      DO p1b = noabn+1,noabn+nvabn
      DO p2b = p1b,noabn+nvabn
      IF (int_mb(k_spinm(jref)+h3b-1)+int_mb(k_spinm(jref)+h4b-1) 
     &.eq. int_mb(k_spinm(jref)+p1b-1)+int_mb(k_spinm(jref)+p2b-1)) THEN
      IF (ieor(int_mb(k_symm(jref)+h3b-1),ieor(int_mb(k_symm(jref)
     &+h4b-1),ieor(int_mb(k_symm(jref)+p1b-1),
     &int_mb(k_symm(jref)+p2b-1)))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_4(h3b,h4b,p1b,p2b,h3b_1,h4b_1,p1b_1,p2b_1)
      CALL TCE_RESTRICTED_4(p1b,p2b,h3b,h4b,p1b_2,p2b_2,h3b_2,h4b_2)
      dim_common = int_mb(k_rangem(jref)+h3b-1) * 
     &int_mb(k_rangem(jref)+h4b-1) * int_mb(k_rangem(jref)+p1b-1) * 
     &int_mb(k_rangem(jref)+p2b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('c2_d2_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &c2_d2_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h4b_1
     & - 1 + noabn * (h3b_1 - 1 + noabn * (p2b_1 - noabn - 1 + nvabn * 
     &(p1b_
     &1 - noabn - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),
     &int_mb(k_rangem(jref)+p1b-1)
     &,int_mb(k_rangem(jref)+p2b-1),int_mb(k_rangem(jref)+h3b-1),
     &int_mb(k_rangem(jref)+h4b-1)
     &,2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('c2_d2_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('c2_d2_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &c2_d2_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h4b_2
     & - 1 + noabn * (h3b_2 - 1 + noabn * (p2b_2 - noabn - 1 + nvabn * 
     &(p1b_
     &2 - noabn - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_rangem(jref)
     &+p1b-1)
     &,int_mb(k_rangem(jref)+p2b-1),int_mb(k_rangem(jref)+h3b-1),
     &int_mb(k_rangem(jref)+h4b-1)
     &,2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('c2_d2_1',6,MA_ERR)
      nsuperh(1) = 1
      nsuperh(2) = 1
      isuperh = 1
      IF (h3b .eq. h4b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p1b .eq. p2b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,4.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2))/FACTORIAL(nsubp(1))/FACTORIAL(ns
     &ubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k_b_sort),
     &dim_common,1.
     &0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('c2_d2_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('c2_d2_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &c2_d2_1',9,MA_ERR)
      CALL TCE_SORT_0(dbl_mb(k_c_sort),dbl_mb(k_c),1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),0)
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('c2_d2_1',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('c2_d2_1',11,MA_ERR)
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
