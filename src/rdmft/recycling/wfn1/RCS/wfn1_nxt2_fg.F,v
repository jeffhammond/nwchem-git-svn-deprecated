head	1.7;
access;
symbols;
locks
	D3Y133:1.7; strict;
comment	@c @;


1.7
date	2015.04.02.06.35.54;	author D3Y133;	state Exp;
branches;
next	1.6;

1.6
date	2015.03.23.04.26.25;	author D3Y133;	state Exp;
branches;
next	1.5;

1.5
date	2015.01.03.09.57.25;	author D3Y133;	state Exp;
branches;
next	1.4;

1.4
date	2014.12.31.05.16.42;	author D3Y133;	state Exp;
branches;
next	1.3;

1.3
date	2014.12.28.10.05.31;	author D3Y133;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.30.08.21.30;	author D3Y133;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.29.08.02.28;	author D3Y133;	state Exp;
branches;
next	;


desc
@Constructing the gradients from the Fock matrix
@


1.7
log
@Added the same column scaling trick to the occupation function Fock matrix
that we also have in the natural orbital Fock matrix.
@
text
@C> \ingroup wfn1_nxt2
C> @@{
C>
C> \brief Take a Fock matrix and construct the gradient matrices
C>
      subroutine wfn1_nxt2_fg(nbf,nex,ox,nx,cx,fx,fo,fn,go,gn,occx,
     +                        ex,tx)
      implicit none
c
      integer nbf !< [Input] The number of basis functions
      integer nex !< [Input] The number of electrons in this spin
                  !< channel
c
      double precision ox(nbf,nbf) !< [Input] The occupation functions
                                   !< for the current spin channel
      double precision nx(nbf,nbf) !< [Input] The natural orbitals
                                   !< for the current spin channel
      double precision cx(nbf)     !< [Input] The electron configuration
                                   !< for the current spin channel
c
      double precision fx(nbf,nbf) !< [Input] The Fock matrix for the
                                   !< current spin channel
c
      double precision fo(nbf,nbf) !< [Output] The Fock matrix for the
                                   !< occupation functions
      double precision fn(nbf,nbf) !< [Output] The Fock matrix for the
                                   !< natural orbitals
c
      double precision go(nbf,nbf) !< [Output] The gradient for the
                                   !< occupation functions
      double precision gn(nbf,nbf) !< [Output] The gradient for the
                                   !< natural orbitals
c
      double precision occx(nbf)   !< [Scratch] The occupation numbers
      double precision ex(nbf)     !< [Scratch] Expectation values
      double precision tx(nbf,nbf) !< [Scratch] Temporary matrix
c
      integer ii !< Counter
      integer jj !< Counter
      integer iq !< Counter over occupation functions
      integer ir !< Counter over occupation functions
c
      double precision tt !< Temporary
c
      double precision wfn1_ddot3 !< Ddot function with weights
      external         wfn1_ddot3
c
c     First calculate the occupation numbers
c
      call dfill(nbf,0.0d0,occx,1)
      do ir = 1, nbf
        do ii = 1, nbf
          occx(ii) = occx(ii) + ox(ii,ir)*ox(ii,ir)*cx(ir)
        enddo
      enddo
c
c     Transform the Fock matrix from AO basis into the natural orbital
c     basis
c
      call dgemm('n','n',nbf,nbf,nbf,1.0d0,fx,nbf,nx,nbf,0.0d0,tx,nbf)
      call dgemm('t','n',nbf,nbf,nbf,1.0d0,nx,nbf,tx,nbf,0.0d0,fn,nbf)
c
c     Now generate the Fock matrix in occupation function basis
c
      call dgemm('n','n',nbf,nbf,nbf,1.0d0,fn,nbf,ox,nbf,0.0d0,tx,nbf)
      call dgemm('t','n',nbf,nbf,nbf,1.0d0,ox,nbf,tx,nbf,0.0d0,fo,nbf)
c
c     Extract the expectation values of the natural orbital energies
c
c     do ii = 1, nbf
c       ex(ii) = fn(ii,ii)
c     enddo
c
c     Scale the columns with the occupation numbers
c
      do ii = 1, nbf
        call dscal(nbf,occx(ii),fn(1,ii),1)
      enddo
c
c     Symmetrize the matrix
c
      do jj = 1, nbf
        do ii = jj+1, nbf
          tt = 0.5d0*(fn(ii,jj)+fn(jj,ii))
          fn(ii,jj) = tt
          fn(jj,ii) = tt
        enddo
      enddo
c
c     Copy the result to the gradient
c
      call dcopy(nbf*nbf,fn,1,gn,1)
c
c     Compute the gradient for the occupation functions
c
c     do iq = 1, nbf
c       do ir = 1, nbf
c         fo(ir,iq) = wfn1_ddot3(nbf,ex,1,ox(1,ir),1,ox(1,iq),1)
c       enddo
c     enddo
c
c     Scale the columns with the occupation numbers
c
      do ir = 1, nbf
        call dscal(nbf,cx(ir),fo(1,ir),1)
      enddo
c
c     Symmetrize the matrix
c
      do iq = 1, nbf
        do ir = iq+1, nbf
          tt = 0.5d0*(fo(ir,iq)+fo(iq,ir))
          fo(ir,iq) = tt
          fo(iq,ir) = tt
        enddo
      enddo
c
c     Copy the result to the gradient and zero the virtual-virtual
c     block (the virtual orbitals do not contribute to the energy)
c
      call dcopy(nbf*nbf,fo,1,go,1)
c     do iq = 1, nbf
c       if (cx(iq).le.0.0d0) then
c         do ir = 1, nbf
c           if (cx(ir).le.0.0d0) then
c             go(ir,iq) = 0.0d0
c           endif
c         enddo
c       endif
c     enddo
c
      end
C> @@}
@


1.6
log
@Extended the approach to use electron configurations in the Fock matrix
construction.
@
text
@d102 16
d122 9
a130 9
      do iq = 1, nbf
        if (cx(iq).le.0.0d0) then
          do ir = 1, nbf
            if (cx(ir).le.0.0d0) then
              go(ir,iq) = 0.0d0
            endif
          enddo
        endif
      enddo
@


1.5
log
@Generate the Fock matrices and energy gradients properly based on
our current understanding of the matter. In particular the 
occupation function matrix is simply the Fock matrix transformed
through the natural orbital basis to the occupation function basis.
@
text
@d6 2
a7 1
      subroutine wfn1_nxt2_fg(nbf,nex,ox,nx,fx,fo,fn,go,gn,occx,ex,tx)
d18 2
d51 1
a51 1
      do ir = 1, nex
d53 1
a53 1
          occx(ii) = occx(ii) + ox(ii,ir)*ox(ii,ir)
d106 8
a113 4
      do iq = nex+1, nbf
        do ir = nex+1, nbf
          go(ir,iq) = 0.0d0
        enddo
@


1.4
log
@Take the regular Fock matrix and construct Fock matrices and gradnnd
gradients for the occupation functions and natural orbitals.
@
text
@d60 5
d67 3
a69 3
      do ii = 1, nbf
        ex(ii) = fn(ii,ii)
      enddo
d93 5
a97 5
      do iq = 1, nbf
        do ir = 1, nbf
          fo(ir,iq) = wfn1_ddot3(nbf,ex,1,ox(1,ir),1,ox(1,iq),1)
        enddo
      enddo
@


1.3
log
@Minor change: fixed a comment.
@
text
@d6 1
a6 1
      subroutine wfn1_nxt2_fg(nbf,nex,ox,nx,fx,go,gn,occx,ex,tx)
d21 5
d58 1
a58 1
      call dgemm('t','n',nbf,nbf,nbf,1.0d0,nx,nbf,tx,nbf,0.0d0,gn,nbf)
d63 1
a63 1
        ex(ii) = gn(ii,ii)
d69 1
a69 1
        call dscal(nbf,occx(ii),gn(1,ii),1)
d76 3
a78 3
          tt = 0.5d0*(gn(ii,jj)+gn(jj,ii))
          gn(ii,jj) = tt
          gn(jj,ii) = tt
d82 4
d90 11
a100 1
          go(ir,iq) = wfn1_ddot3(nbf,ex,1,ox(1,ir),1,ox(1,iq),1)
@


1.2
log
@fixing_type_declarations
@
text
@d27 1
a27 1
      double precision ex(nbf)     !< [Scratch] Expection values
@


1.1
log
@Initial revision
@
text
@d30 10
d69 1
a69 1
      do jj = 1, nbf,
@
