C> \ingroup wfn1
C> @{
C>
C> \brief Go and numerically optimize the energy in wfn1 formalism
C>
C> Go and actually compute the total energy within the wfn1
C> formalism. It is assumed that all the memory has been arranged in
C> the calling routine.
C>
C> Because the gradient of the energy is somehow non-trivial to
C> formulate correctly this routine uses numerical differentation
C> to optimize the energy. Obviously this is rather inefficient but
C> it will
C> - provide an opportunity to assess the quality of the energy
C>   expression,
C> - provide a reference implementation that can be used to test
C>   analytical derivatives.
C> The routine uses the 3-point rule for the gradient:
C> \f{eqnarray*}{
C>   \frac{\partial f}{\partial x} 
C>   &=& \frac{f(x+h)-f(x-h)}{2h} + O(h^2)
C> \f}
C> as well as the 3-point rule for the second derivative:
C> \f{eqnarray*}{
C>   \frac{\partial^2 f}{\partial x^2} 
C>   &=& \frac{f(x+h)-2f(x)+f(x-h)}{h^2} + O(h)
C> \f}
C> This information allows a reasonable estimate of the displacement
C> \f$d\f$ such that
C> \f{eqnarray*}{
C>   \left.\frac{\partial f(y)}{\partial y}\right|_{y=x+d} &=& 0
C> \f}
C> The question of picking the optimal \f$h\f$ involves the trade-off
C> between two kinds of errors:
C> - the truncation error is smaller for smaller \f$h\f$
C> - the numerical round-off error is smaller for larger \f$h\f$
C> On balance \f$h_{\mathrm{opt}} = max(|x|,1)\sqrt{\epsilon}\f$,
C> where \f$\epsilon\f$ is the machine precision.
C>
C> The basic algorithm behind this routine is to go through the four
C> sets of rotations:
C> - \f$\alpha\f$-occupation functions
C> - \f$\beta\f$-occupation functions
C> - \f$\alpha\f$-natural orbitals functions
C> - \f$\beta\f$-natural orbitals functions
C> and for each set loop over all function pairs evaluating for each
C> what a rotation by a small angle would do to the energy. These 
C> iterations are repeated until the gradient gets really small.
C>
      subroutine wfn1_energy_num_doit(rtdb,geom,basis,tol,nbf,nst,
     +           nea,neb,h1,eri,erix,ov,r_noa,r_nob,r_ofa,r_ofb,
     +           r_noa2,r_nob2,r_ofa2,r_ofb2,En0,r_u,r_l,
     +           l_acta,l_actb,
     +           tol_act)
      implicit none
c
#include "stdio.fh"
c
      integer rtdb     !< [Input] The runtime database handle
      integer geom     !< [Input] The geometry handle
      integer basis    !< [Input] The basis set handle
      integer nbf      !< [Input] The number of basis functions
      integer nst      !< [Input] The maximum number of states
      integer nea(nst) !< [Input] The number of alpha electrons
      integer neb(nst) !< [Input] The number of beta electrons
c
      double precision h1(nbf,nbf) !< [Scratch] The 1-electron 
                                   !< Hamiltonian
      double precision ov(nbf,nbf) !< [Scratch] The overlap integrals
      double precision eri(nbf,nbf,nbf,nbf) !< [Scratch] The 2-electron 
                                            !< integrals
      double precision erix(nbf,nbf,nbf,nbf) !< [Scratch] The 2-electron
                                             !< integrals
c
      double precision tol                !< Convergence tolerance
      double precision r_noa(nbf,nbf,nst) !< [In/Output] The alpha
      !< electron natural orbitals
      double precision r_nob(nbf,nbf,nst) !< [In/Output] The beta
      !< electron natural orbitals
      double precision r_ofa(nbf,nbf,nst) !< [In/Output] The alpha
      !< electron occupation functions
      double precision r_ofb(nbf,nbf,nst) !< [In/Output] The beta
      !< electron occupation functions
      double precision r_noa2(nbf,nbf,nst) !< [Scratch] The alpha
      !< electron natural orbitals
      double precision r_nob2(nbf,nbf,nst) !< [Scratch] The beta
      !< electron natural orbitals
      double precision r_ofa2(nbf,nbf,nst) !< [Scratch] The alpha
      !< electron occupation functions
      double precision r_ofb2(nbf,nbf,nst) !< [Scratch] The beta
      !< electron occupation functions
c
      double precision En0(nst) !< [Output] The total energies
c
      double precision r_u(nbf,nbf) !< [Scratch] The rotation matrix
      double precision r_l(nbf,nbf) !< [Scratch] The lagrangian matrix
c
      logical l_acta(nbf,nst) !< [Scratch] Which \f$\alpha\f$
      !< natural orbitals are active
      logical l_actb(nbf,nst) !< [Scratch] Which \f$\beta\f$
      !< natural orbitals are active
c
      double precision tol_act !< [Input] The threshold for active
      !< natural orbitals
c
c     Local variables
c
      integer iteration           !< The iteration counter
      double precision dnorm      !< The gradient norm
      double precision damp       !< The damping factor
                                  !< for an energy minimization
      double precision h          !< The step size
      double precision d          !< The displacement
      double precision rotup(2,2) !< Rotation over positive angle
      double precision rotdn(2,2) !< Rotation over negative angle
      double precision Em1(nst)   !< The total energies
      double precision Ep1(nst)   !< The total energies
      double precision dE         !< The energy gradient
      double precision d2E        !< The energy Hessian
      integer is                  !< Counter over occupation functions
      integer it                  !< Counter over occupation functions
      integer iu                  !< Counter over occupation functions
      integer im                  !< Counter over natural orbitals
      integer in                  !< Counter over natural orbitals
c
c     Functions
c
      double precision wfn1_norm
      external         wfn1_norm
c
c     Optimal h is the square root of the machine precision
c
      tol_act = -1.0d0
      h = 1.0d-8
cDEBUG
      write(*,*)'convergence tolerance = ',tol
      h = 1.0d-2
cDEBUG
      rotup(1,1) =  cos(h)
      rotup(2,1) = -sin(h)
      rotup(1,2) =  sin(h)
      rotup(2,2) =  cos(h)
      rotdn(1,1) =  cos(-h)
      rotdn(2,1) = -sin(-h)
      rotdn(1,2) =  sin(-h)
      rotdn(2,2) =  cos(-h)
c
c     For now we use a steepest decent implementation
c
      call dfill(nbf*nbf,0.0d0,h1,1)
      call dfill(nbf*nbf,0.0d0,ov,1)
      call dfill(nbf*nbf*nbf*nbf,0.0d0,eri,1)
      call dfill(nbf*nbf*nbf*nbf,0.0d0,erix,1)
      call dfill(nbf*nbf,0.0d0,r_l,1)
c
      call int_init(rtdb,1,basis)
      call wfn1_1e_tv(basis,nbf,h1)
      call wfn1_1e_s(basis,nbf,ov)
      call wfn1_2e_rep(basis,nbf,eri,erix)
      call int_terminate
cDEBUG
      write(*,*)'1-electron Hamiltonian'
      call hess_hssout(h1,nbf,nbf,nbf)
      write(*,*)'overlap matrix'
      call hess_hssout(ov,nbf,nbf,nbf)
cDEBUG
c
      iteration = 0
      damp = 0.100d0
      dnorm = 10.0d0
      write(luout,'(1x,"iter",3x,"energy",6x,"norm",6x,"damping")')
      do while (dnorm.gt.tol)
cDEBUG
        write(*,*)
        write(*,*)'alpha natural orbitals'
        call hess_hssout(r_noa,nbf,nbf,nbf)
        write(*,*)
        write(*,*)'beta natural orbitals'
        call hess_hssout(r_nob,nbf,nbf,nbf)
        write(*,*)
        write(*,*)'alpha occupation functions'
        call hess_hssout(r_ofa,nbf,nbf,nbf)
        write(*,*)
        write(*,*)'beta occupation functions'
        call hess_hssout(r_ofb,nbf,nbf,nbf)
        write(*,*)
cDEBUG
        iteration = iteration + 1
        write(luout,'(1x,i5," iter ",f22.8,f22.8,f8.3)')
     +        iteration,en0(1),dnorm,damp
        dnorm = 0.0d0
c
c       Rotate alpha occupation functions
c
        call dcopy(nbf*nbf,r_ofb,1,r_ofb2,1)
        call dcopy(nbf*nbf,r_noa,1,r_noa2,1)
        call dcopy(nbf*nbf,r_nob,1,r_nob2,1)
        do it = 1, nbf
          do is = 1, it-1
            call dcopy(nbf*nbf,r_ofa,1,r_ofa2,1)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dfill(nbf*nbf,0.0d0,r_u,1)
            do iu = 1, nbf
              r_u(iu,iu) = 1.0d0
            enddo
            r_u(is,is) = rotup(1,1)
            r_u(it,it) = rotup(2,2)
            r_u(it,is) = rotup(2,1)
            r_u(is,it) = rotup(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofa,nbf,r_u,nbf,
     +                 0.0d0,r_ofa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Ep1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            r_u(is,is) = rotdn(1,1)
            r_u(it,it) = rotdn(2,2)
            r_u(it,is) = rotdn(2,1)
            r_u(is,it) = rotdn(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofa,nbf,r_u,nbf,
     +                 0.0d0,r_ofa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Em1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            dE = (Ep1(1)-Em1(1))/(2*h)
            d2E = (Ep1(1)-2*En0(1)+Em1(1))/(h*h)
            d = -dE/max(1.0d0,abs(d2E))
cDEBUG
            write(*,*)'*** ofa ',it,is,Em1(1),En0(1),Ep1(1)
            write(*,*)'*** ofa ',it,is,dE,d2E,d
cDEBUG
            d = damp*d
            dnorm = max(abs(dE),dnorm)
            r_u(is,is) =  cos(d)
            r_u(it,it) =  cos(d)
            r_u(it,is) = -sin(d)
            r_u(is,it) =  sin(d)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofa,nbf,r_u,nbf,
     +                 0.0d0,r_ofa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dcopy(nbf*nbf,r_ofa2,1,r_ofa,1)
          enddo
        enddo
cDEBUG
        write(*,*)
cDEBUG
c
c       Rotate beta occupation functions
c
        call dcopy(nbf*nbf,r_ofa,1,r_ofa2,1)
        call dcopy(nbf*nbf,r_noa,1,r_noa2,1)
        call dcopy(nbf*nbf,r_nob,1,r_nob2,1)
        do it = 1, nbf
          do is = 1, it-1
            call dcopy(nbf*nbf,r_ofb,1,r_ofb2,1)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dfill(nbf*nbf,0.0d0,r_u,1)
            do iu = 1, nbf
              r_u(iu,iu) = 1.0d0
            enddo
            r_u(is,is) = rotup(1,1)
            r_u(it,it) = rotup(2,2)
            r_u(it,is) = rotup(2,1)
            r_u(is,it) = rotup(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofb,nbf,r_u,nbf,
     +                 0.0d0,r_ofb2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Ep1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            r_u(is,is) = rotdn(1,1)
            r_u(it,it) = rotdn(2,2)
            r_u(it,is) = rotdn(2,1)
            r_u(is,it) = rotdn(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofb,nbf,r_u,nbf,
     +                 0.0d0,r_ofb2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Em1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            dE = (Ep1(1)-Em1(1))/(2*h)
            d2E = (Ep1(1)-2*En0(1)+Em1(1))/(h*h)
            d = -dE/max(1.0d0,abs(d2E))
cDEBUG
            write(*,*)'*** ofb ',it,is,Em1(1),En0(1),Ep1(1)
            write(*,*)'*** ofb ',it,is,dE,d2E,d
            d = damp*d
cDEBUG
            dnorm = max(abs(dE),dnorm)
            r_u(is,is) =  cos(d)
            r_u(it,it) =  cos(d)
            r_u(it,is) = -sin(d)
            r_u(is,it) =  sin(d)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_ofb,nbf,r_u,nbf,
     +                 0.0d0,r_ofb2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dcopy(nbf*nbf,r_ofb2,1,r_ofb,1)
          enddo
        enddo
cDEBUG
        write(*,*)
cDEBUG
c
c       Rotate alpha natural orbitals
c
        call dcopy(nbf*nbf,r_ofa,1,r_ofa2,1)
        call dcopy(nbf*nbf,r_ofb,1,r_ofb2,1)
        call dcopy(nbf*nbf,r_nob,1,r_nob2,1)
        do in = 1, nbf
          do im = 1, in-1
            call dcopy(nbf*nbf,r_noa,1,r_noa2,1)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dfill(nbf*nbf,0.0d0,r_u,1)
            do iu = 1, nbf
              r_u(iu,iu) = 1.0d0
            enddo
            r_u(im,im) = rotup(1,1)
            r_u(in,in) = rotup(2,2)
            r_u(in,im) = rotup(2,1)
            r_u(im,in) = rotup(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_noa,nbf,r_u,nbf,
     +                 0.0d0,r_noa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Ep1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            r_u(im,im) = rotdn(1,1)
            r_u(in,in) = rotdn(2,2)
            r_u(in,im) = rotdn(2,1)
            r_u(im,in) = rotdn(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_noa,nbf,r_u,nbf,
     +                 0.0d0,r_noa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Em1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            dE = (Ep1(1)-Em1(1))/(2*h)
            d2E = (Ep1(1)-2*En0(1)+Em1(1))/(h*h)
            d = -dE/max(1.0d0,abs(d2E))
cDEBUG
            write(*,*)'*** noa ',in,im,Em1(1),En0(1),Ep1(1)
            write(*,*)'*** noa ',in,im,dE,d2E,d
            d = damp*d
cDEBUG
            dnorm = max(abs(dE),dnorm)
            r_u(im,im) =  cos(d)
            r_u(in,in) =  cos(d)
            r_u(in,im) = -sin(d)
            r_u(im,in) =  sin(d)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_noa,nbf,r_u,nbf,
     +                 0.0d0,r_noa2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dcopy(nbf*nbf,r_noa2,1,r_noa,1)
          enddo
        enddo
cDEBUG
        write(*,*)
cDEBUG
c
c       Rotate beta natural orbitals
c
        call dcopy(nbf*nbf,r_ofa,1,r_ofa2,1)
        call dcopy(nbf*nbf,r_ofb,1,r_ofb2,1)
        call dcopy(nbf*nbf,r_noa,1,r_noa2,1)
        do in = 1, nbf
          do im = 1, in-1
            call dcopy(nbf*nbf,r_nob,1,r_nob2,1)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dfill(nbf*nbf,0.0d0,r_u,1)
            do iu = 1, nbf
              r_u(iu,iu) = 1.0d0
            enddo
            r_u(im,im) = rotup(1,1)
            r_u(in,in) = rotup(2,2)
            r_u(in,im) = rotup(2,1)
            r_u(im,in) = rotup(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_nob,nbf,r_u,nbf,
     +                 0.0d0,r_nob2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Ep1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            r_u(im,im) = rotdn(1,1)
            r_u(in,in) = rotdn(2,2)
            r_u(in,im) = rotdn(2,1)
            r_u(im,in) = rotdn(1,2)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_nob,nbf,r_u,nbf,
     +                 0.0d0,r_nob2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,Em1,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            dE = (Ep1(1)-Em1(1))/(2*h)
            d2E = (Ep1(1)-2*En0(1)+Em1(1))/(h*h)
            d = -dE/max(1.0d0,abs(d2E))
cDEBUG
            write(*,*)'*** nob ',in,im,Em1(1),En0(1),Ep1(1)
            write(*,*)'*** nob ',in,im,dE,d2E,d
            d = damp*d
cDEBUG
            dnorm = max(abs(dE),dnorm)
            r_u(im,im) =  cos(d)
            r_u(in,in) =  cos(d)
            r_u(in,im) = -sin(d)
            r_u(im,in) =  sin(d)
            call dgemm('n','n',nbf,nbf,nbf,1.0d0,r_nob,nbf,r_u,nbf,
     +                 0.0d0,r_nob2,nbf)
            call wfn1_engrad(.false.,nbf,1,nea,neb,h1,eri,erix,ov,
     +                       r_noa2,r_nob2,
     +                       r_ofa2,r_ofb2,r_l,r_l,r_l,r_l,
     +                       r_l,r_l,En0,r_noa,r_nob,
     +                       r_ofa,r_ofb,
     +                       r_l,r_l,r_l,r_l,r_l,r_l,
     +                       l_acta,l_actb,tol_act)
            call dcopy(nbf*nbf,r_nob2,1,r_nob,1)
          enddo
        enddo
      enddo
      write(luout,'(1x,i5,f22.8,f22.8,f8.3)')iteration,en0(1),dnorm,
     +                                       damp
      
      end
C> @}
