C> \ingroup wfn1
C> @{
C>
C> \brief Calculate the 1-electron energy and optionally the gradient
C> within the wfn1 formalism
C> 
C> This routine adds the 1-electron energy and optionally the
C> corresponding gradient terms within the wfn1 formalism to its
C> arguments. The current formulation assumes that all quantities are
C> kept in memory and the implementation supports only serial execution.
C>
C> Within the wfn1 formalism the 1-electron energy is expressed in terms
C> of the occupation functions and the natural orbitals as:
C> \f{eqnarray*}{
C>  E^{1} &=& \sum_{\sigma}\sum_{i}
C>  \sum_{p\in\{occ\}}\sum_{ab}
C>  C^{D\sigma}_{ai}C^{D\sigma}_{bi}C^{O\sigma}_{ip}C^{O\sigma}_{ip}
C>  h_{ab}
C>  \;\;\;\;\;\;\;\;\;\;(1)
C> \f}
C> Obviously this energy expression can be summarized in terms of the
C> total 1-electron density matrix as
C> \f{eqnarray*}{
C>    E^{1} &=& \sum_{\sigma}\sum_{ab}
C>    D^{T\sigma}_{ab}h_{ab},
C>    \;\;\;\;\;\;\;\;\;\;(2) \\\\
C>    D^{T\sigma}_{ab} &=& \sum_i \sum_{p}
C>    C^{D\sigma}_{ai}C^{D\sigma}_{bi}C^{O\sigma}_{ip}C^{O\sigma}_{ip}
C> \f}
C> Although the energy can be summarized this way the gradient of the
C> energy cannot. The gradient requires the derivatives with respect to
C> the occupation functions as well as the natural orbitals. I.e.
C> \f{eqnarray*}{
C>    \frac{\mathrm{d}E^{1}}{\mathrm{d}C^{O\sigma"}_{mt}}
C>    &=& \sum_{\sigma}\sum_{ab}
C>    \sum_{i}\sum_{p} \delta_{\sigma\sigma"}\delta_{im}\delta_{pt}
C>    2C^{D\sigma}_{ai}C^{D\sigma}_{bi}C^{O\sigma}_{ip}
C>    h_{ab}
C>    \;\;\;\;\;\;\;\;\;\;(3)\\\\
C>    &=& \sum_{ab}
C>    \sum_{j}
C>    2C^{D\sigma"}_{am}C^{D\sigma"}_{bm}C^{O\sigma"}_{mt}
C>    h_{ab}
C>    \;\;\;\;\;\;\;\;\;\;(4)\\\\
C> \f}
C> \f{eqnarray*}{
C>    \frac{\mathrm{d}E^{1}}{\mathrm{d}C^{D\sigma"}_{em}}
C>    &=& \sum_{\sigma}\sum_{ab}\sum_{i}\sum_{p}
C>    \delta_{\sigma\sigma"}\delta_{ae}\delta_{im}
C>    C^{D\sigma}_{bi}C^{O\sigma}_{ip}C^{O\sigma}_{ip}
C>    h_{ab} \\\\
C>    &&+ \sum_{\sigma}\sum_{ab}\sum_{i}\sum_{p}
C>    \delta_{\sigma\sigma"}\delta_{be}\delta_{im}
C>    C^{D\sigma}_{ai}C^{O\sigma}_{ip}C^{O\sigma}_{ip}
C>    h_{ab}
C>    \;\;\;\;\;\;\;\;\;\;(5)\\\\
C>    &=& \sum_{b}\sum_{p}
C>    C^{D\sigma"}_{bm}C^{O\sigma"}_{mp}C^{O\sigma"}_{mp}
C>    h_{eb} \\\\
C>    &&+ \sum_{a}\sum_{p}
C>    C^{D\sigma"}_{am}C^{O\sigma"}_{mp}C^{O\sigma"}_{mp}
C>    h_{ae} 
C>    \;\;\;\;\;\;\;\;\;\;(6) \\\\
C> \f}
      subroutine wfn1_1el(do_grad,nbf,nst,nea,neb,r_noa,r_nob,
     +                      r_ofa,r_ofb,h1,
     +                      En,r_dnoa,r_dnob,r_dofa,r_dofb,
     +                      da,db,docca,doccb,dcd,dvd)
      implicit none
c
#include "errquit.fh"
#include "mafdecls.fh"
#include "global.fh"
c
      logical do_grad  !< [Input] .True. if the energy gradient should
                       !< be calculated, otherwise only the energy is
                       !< evaluated.
      integer nbf      !< [Input] The number of basis functions
      integer nst      !< [Input] The number of states
      integer nea(nst) !< [Input] The number of \f$\alpha\f$ electrons
                       !< for each state
      integer neb(nst) !< [Input] The number of \f$\beta\f$ electrons
                       !< for each state
c
      double precision r_noa(nbf,nbf,nst) !< [Input] The \f$\alpha\f$
                                          !< electron natural orbitals
      double precision r_nob(nbf,nbf,nst) !< [Input] The \f$\beta\f$
                                          !< electron natural orbitals
      double precision r_ofa(nbf,nbf,nst) !< [Input] The \f$\alpha\f$
                                          !< electron occupation
                                          !< functions
      double precision r_ofb(nbf,nbf,nst) !< [Input] The \f$\beta\f$
                                          !< electron occupation
                                          !< functions
c
      double precision h1(nbf,nbf) !< [Input] The actual
                                   !< 1-electron integrals
c
      double precision En(nst) !< [Output] The 1-electron
                               !< energy for each state
c
      double precision r_dnoa(nbf,nbf,nst) !< [Output] The gradient of
                                           !< the energy with respect to
                                           !< the \f$\alpha\f$-electron
                                           !< natural orbitals.
      double precision r_dnob(nbf,nbf,nst) !< [Output] The gradient of
                                           !< the energy with respect to
                                           !< the \f$\beta\f$-electron
                                           !< natural orbitals.
      double precision r_dofa(nbf,nbf,nst) !< [Output] The gradient of
                                           !< the energy with respect to
                                           !< the \f$\alpha\f$-electron
                                           !< occupation functions.
      double precision r_dofb(nbf,nbf,nst) !< [Output] The gradient of
                                           !< the energy with respect to
                                           !< the \f$\beta\f$-electron
                                           !< occupation functions.
      double precision da(nbf,nbf)     !< [Scratch] Alpha-electron
                                       !< density matrix.
      double precision db(nbf,nbf)     !< [Scratch] Beta-electron
                                       !< density matrix.
      double precision docca(nbf)      !< [Scratch] Alpha-electron
                                       !< occupation numbers
      double precision doccb(nbf)      !< [Scratch] Beta-electron
                                       !< occupation numbers
      double precision dcd(nbf,nbf)    !< [Scratch] Partially
                                       !< transformed matrix
      double precision dvd(nbf)        !< [Scratch] A vector in terms
                                       !< of natural orbitals
c
c     Local variables
c
      integer ia, ib ! Counters over basis functions
      integer ii     ! Counter over natural orbitals
      integer ir     ! Counter over occupation functions
      integer ist    ! Counter over states
c
c     Functions
c
      double precision ddot
      external         ddot
c
c     Code
c
      do ist = 1, nst ! loop over all states
c
c       Compute the total 1-electron density matrices for this state
c
        do ii = 1, nbf
          docca(ii) = 0.0d0
          doccb(ii) = 0.0d0
        enddo
        do ir = 1, nea(ist)
          do ii = 1, nbf
            docca(ii) = docca(ii) + r_ofa(ii,ir,ist)*r_ofa(ii,ir,ist)
          enddo
        enddo
        do ir = 1, neb(ist)
          do ii = 1, nbf
            doccb(ii) = doccb(ii) + r_ofb(ii,ir,ist)*r_ofb(ii,ir,ist)
          enddo
        enddo
        call dfill(nbf*nbf,0.0d0,da,1)
        call dfill(nbf*nbf,0.0d0,db,1)
        do ib = 1, nbf
          do ia = 1, nbf
            do ii = 1, nbf
              da(ia,ib) = da(ia,ib)
     +                  + r_noa(ia,ii,ist)*r_noa(ib,ii,ist)*docca(ii)
              db(ia,ib) = db(ia,ib)
     +                  + r_nob(ia,ii,ist)*r_nob(ib,ii,ist)*doccb(ii)
            enddo
          enddo
        enddo
c
c       Contract the 1-electron density matrix with the
c       1-electron integrals and add the energy contribution
c
        En(ist) = En(ist) + ddot(nbf*nbf,da,1,h1,1)
     +                    + ddot(nbf*nbf,db,1,h1,1)
c
        if (do_grad) then
c
c         First compute the gradient wrt. the natural orbital
c         coefficients, see Eq.(6).
c
c         = A-A: Compute F^A_am = sum_b F^A_ab C^DA_bm
c
          call dgemm('N','N',nbf,nbf,nbf,2.0d0,h1,nbf,
     +               r_noa(1,1,ist),nbf,0.0d0,dcd,nbf)
c
c         = A-A: Scale the column with the occupation numbers and add
c           to derivative
c
          do ii = 1, nbf
            call daxpy(nbf,docca(ii),dcd(1,ii),1,
     +                 r_dnoa(1,ii,ist),1)
          enddo
c
c         Next compute the gradient wrt. the occupation function
c         coefficients, see Eq.(4).
c
c         = A-A: Compute F^A_am = sum_b F^A_ab C^DA_bm
c
          call dgemm('N','N',nbf,nbf,nbf,2.0d0,h1,nbf,
     +               r_noa(1,1,ist),nbf,0.0d0,dcd,nbf)
c
c         = A-A: Contract each column with C^DA_am
c
          do ii = 1, nbf
            dvd(ii) = ddot(nbf,r_noa(1,ii,ist),1,dcd(1,ii),1)
          enddo
c
c         = A-A: Add the contribution to the gradient
c
          do ir = 1, nea(ist)
            do ii = 1, nbf
              r_dofa(ii,ir,ist) = r_dofa(ii,ir,ist) 
     +                          + dvd(ii)*r_ofa(ii,ir,ist)
            enddo
          enddo
c
c         First compute the gradient wrt. the natural orbital
c         coefficients, see Eq.(6).
c
c         = B-B: Compute F^B_am = sum_b F^B_ab C^DB_bm
c
          call dgemm('N','N',nbf,nbf,nbf,2.0d0,h1,nbf,
     +               r_nob(1,1,ist),nbf,0.0d0,dcd,nbf)
c
c         = B-B: Scale the column with the occupation numbers and add
c           to derivative
c
          do ii = 1, nbf
            call daxpy(nbf,doccb(ii),dcd(1,ii),1,
     +                 r_dnob(1,ii,ist),1)
          enddo
c
c         Next compute the gradient wrt. the occupation function
c         coefficients, see Eq.(4).
c
c         = B-B: Compute F^B_am = sum_b F^B_ab C^DB_bm
c
          call dgemm('N','N',nbf,nbf,nbf,2.0d0,h1,nbf,
     +               r_nob(1,1,ist),nbf,0.0d0,dcd,nbf)
c
c         = B-B: Contract each column with C^DB_am
c
          do ii = 1, nbf
            dvd(ii) = ddot(nbf,r_nob(1,ii,ist),1,dcd(1,ii),1)
          enddo
c
c         = B-B: Add the contribution to the gradient
c
          do ir = 1, neb(ist)
            do ii = 1, nbf
              r_dofb(ii,ir,ist) = r_dofb(ii,ir,ist) 
     +                          + dvd(ii)*r_ofb(ii,ir,ist)
            enddo
          enddo
        endif
c
      enddo
c
      end
C> @}
