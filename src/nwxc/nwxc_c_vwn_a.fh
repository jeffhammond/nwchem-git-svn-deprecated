c
c     General implementation of VWN functionals
c
c     BGJ (4/00)
*
* $Id$
*
c     Meanings of macros used in constructing different VWN parameterizations
c     The determining macro FNL_VWN_xxx is set in the .F file
c
c     VWN_NAME - name of subroutine
c     USE_VWN_DEC - defined if VWN form for deltaEc(rs,zeta), Eq. 3.2, is used
c     NEED_RPA_RS1 - defined if the RPA epsilon difference deltaERPA(rs,1) is
c                    needed in addition to the Monte Carlo value deltaEc(rs,1)
c     The following are determined based on how the above are set
c     N_EPS - number of different parameterizations of epsilon involved
c     BETA_SET_RS1 - governs which set of parameters to use for the epsilon
c                    difference in beta in Eq. 3.2

#if defined(FNL_VWN_1)
#define VWN_NAME_P nwxc_c_vwn1_p
#define VWN_NAME nwxc_c_vwn1
#define VWN_NAME_D2 nwxc_c_vwn1_d2
#define VWN_NAME_D3 nwxc_c_vwn1_d3

#elif defined(FNL_VWN_1_RPA)
#define VWN_NAME_P nwxc_c_vwn1_rpa_p
#define VWN_NAME nwxc_c_vwn1_rpa
#define VWN_NAME_D2 nwxc_c_vwn1_rpa_d2
#define VWN_NAME_D3 nwxc_c_vwn1_rpa_d3

#elif defined(FNL_VWN_2)
#define VWN_NAME_P nwxc_c_vwn2_p
#define VWN_NAME nwxc_c_vwn2
#define VWN_NAME_D2 nwxc_c_vwn2_d2
#define VWN_NAME_D3 nwxc_c_vwn2_d3
#define USE_VWN_DEC
#define NEED_RPA_RS1

#elif defined(FNL_VWN_3)
#define VWN_NAME_P nwxc_c_vwn3_p
#define VWN_NAME nwxc_c_vwn3
#define VWN_NAME_D2 nwxc_c_vwn3_d2
#define VWN_NAME_D3 nwxc_c_vwn3_d3
#define USE_VWN_DEC
#define NEED_RPA_RS1

#elif defined(FNL_VWN_4)
#define VWN_NAME_P nwxc_c_vwn4_p
#define VWN_NAME nwxc_c_vwn4
#define VWN_NAME_D2 nwxc_c_vwn4_d2
#define VWN_NAME_D3 nwxc_c_vwn4_d3
#define USE_VWN_DEC

#elif defined(FNL_VWN_5)
#define VWN_NAME_P nwxc_c_vwn5_p
#define VWN_NAME nwxc_c_vwn5
#define VWN_NAME_D2 nwxc_c_vwn5_d2
#define VWN_NAME_D3 nwxc_c_vwn5_d3
#define USE_VWN_DEC
#endif

c     Set how many different parameterizations of epsilon are involved
#ifndef USE_VWN_DEC
#define N_EPS 2
#else
#ifndef NEED_RPA_RS1
#define N_EPS 3
#else
#define N_EPS 5
#endif
#endif

#ifdef USE_VWN_DEC
c     Set which parameters to use for epsilon difference in beta(rs)
#ifdef NEED_RPA_RS1
#define BETA_SET_RS1 4
#else
#define BETA_SET_RS1 1
#endif
#endif

#if !defined(SECOND_DERIV) && !defined(THIRD_DERIV)
#if defined(NWAD_PRINT)
      Subroutine VWN_NAME_P(tol_rho, ipol, nq, wght, 
     &                    rho, func)
#else
      Subroutine VWN_NAME(tol_rho, ipol, nq, wght, 
     &                    rho, func)
#endif
#elif defined(SECOND_DERIV) && !defined(THIRD_DERIV)
c     Could not get concatenation operator to work with g77 preprocessor
      Subroutine VWN_NAME_D2(tol_rho, ipol, nq, wght,
     &                       rho, func)
#else
      Subroutine VWN_NAME_D3(tol_rho, ipol, nq, wght,
     &                       rho, func)
#endif
c
#include "nwad.fh"
c
      implicit none
#include "nwxc_param.fh"
c
      double precision tol_rho !< [Input] The lower limit on the density
      integer ipol             !< [Input] The number of spin-channels
      integer nq               !< [Input] The number of points
      double precision wght    !< [Input] The weight of the functional
c
c     Charge Density
c
      type(nwad_dble)::rho(nq,*) !< [Input] The density
c
c     The functional values
c
      type(nwad_dble)::func(*) !< [Output] The value of the functional
c
c     Partial Derivatives of the Correlation Energy Functional
c
c     double precision Amat(nq,*)  !< [Output] The derivative wrt rho
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c     double precision Amat2(nq,*) !< [Output] The 2nd derivative wrt rho
#endif
c Daniel (5-23-12): Third order derivative of the functional with 
c respect to the electron density.
#if defined(THIRD_DERIV)
c     double precision Amat3(nq,*)
#endif
c
      double precision onethird, fourthirds, twothirds, pi
      double precision seventhirds, threehalf
      double precision fivethirds
      Parameter (onethird = 1.D0/3.D0, fourthirds = 4.D0/3.D0)
      Parameter (twothirds = 2.D0/3.D0)
      Parameter (fivethirds = 5.D0/3.D0)
      Parameter (seventhirds = 7.D0/3.D0)
      Parameter (threehalf = 3.D0/2.D0)
c
c     Functional Parameters (different flavors of VWN)
c     1 = EcP - Monte Carlo
c     2 = EcF - Monte Carlo
c     3 = alpha - Monte Carlo
c     4 = EcP - RPA
c     5 = EcF - RPA
c     6 = alpha - RPA
c
      double precision A(6), b(6), c(6), x0(6), Q(6),
     &     ct1(6), ct2(6), ct3(6)
      save A, b, c, x0, Q, ct1, ct2, ct3
      data A / 0.0621814D0, 0.D0, 0.D0,
     &         0.0621814D0, 0.D0, 0.D0 / ! see initialization below
      data b / 3.72744D0, 7.06042D0, 1.13107D0,
     &        13.0720D0, 20.1231D0, 1.06835D0 /
      data c / 12.9352D0, 18.0578D0, 13.0045D0,
     &         42.7198D0, 101.578D0, 11.4813D0 /
      data x0 / -0.10498D0, -0.32500D0, -0.00475840D0,
     &          -0.409286D0, -0.743294D0, -0.228344D0 /
c
      type(nwad_dble)::rhoval,fz,rs,x,rchi,dec_rsz,d1chi,t1,t2,t3
      type(nwad_dble)::dec_rs1,eps,e(5),s
      type(nwad_dble)::zeta,zeta2,zeta3,zeta4
      double precision d1e(5), d1rs, d1x,
     &     d1t1, d1t2, d1t3, d1s,
     &     d1zeta(2), d1ersz(2), d1edrho(2), d1fz,
     &     d1dec_rs1, d1dec_rsz(2)
      double precision d2fz0
#ifdef NEED_RPA_RS1
      type(nwad_dble)::derpa_rs1
      double precision d1derpa_rs1
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c     double precision d2derpa_rs1
#endif
c Daniel (5-29-12): Third order derivative stuff for Delta[epsilon_RPA]
#if defined(THIRD_DERIV)
c     double precision d3derpa_rs1
#endif
#endif
#ifdef USE_VWN_DEC
      type(nwad_dble)::devwn_rsz, beta_rs1, t_vwn
      double precision d1devwn_rsz(2),d1beta_rs1, d1t_vwn
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c     double precision d2beta_rs1, d2t_vwn, d2devwn_rsz(3)
#endif
c Daniel (5-30-12): Third derivative stuff
#if defined(THIRD_DERIV)
c     double precision d3beta_rs1, d3t_vwn, d3devwn_rsz(4)
#endif
#endif
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c     double precision d2rs, d2x, d2t1, d2t2, d2t3, d2s,
c    &     d2e(5), d2zeta(3), d2dec_rs1, d2dec_rsz(3),
c    &     d2ersz(3), d2edrho(3), d2fz, rrho2
#endif
c Daniel (5-23-12): Third derivative stuff
#ifdef THIRD_DERIV
c     double precision d3rs, d3x, d3t1, d3t2, d3t3, d3s,
c    &     d3e(5), d3fz, d3zeta(4), rrho3, d3dec_rs1,
c    &     d3dec_rsz(4), d3ersz(4), d3edrho(4)
#endif
      double precision p0, p1, p2, p3, p4
c
      integer i, n, initial
      save initial
      data initial /1/
c
c     Define miscellaneous parameters.
c
      pi = dacos(-1.0d0)
c Daniel (5-23-12): 
c p0 is for defining the Wigner-Seitz radius
c p1 is for the function, f[zeta]
c p2 is for the first derivative of f[zeta]
c p3 is for the second derivative of f[zeta] 
c d2fz0 is the second derivative of f[zeta], zeta = 0
      p0 = (1.0d0/(fourthirds*pi))**onethird
      p1 = 0.5D0/(2.d0**onethird - 1.d0)
      p2 = fourthirds*p1
      p3 = onethird*p2
      p4 = -twothirds*p3
      d2fz0 = 2.d0*p3
      if (initial.eq.1)then
         initial = 0
c
c     Initialize data values that are expressions here
c     instead of in data statement
c
         A(2) = 0.5D0*A(1)
         A(3) = -1.D0/(3.D0*pi*pi)
         A(5) = A(2)
         A(6) = A(3)
c
c Daniel (5-23-12): Analytical formulas for the correlation functional
c from Eq. [4.4] in VWN.  This is done for all VWN functionals, then
c the parameters of the functional requested by the user are employed
c in the calculation.
c ct1 = constant for term 1
c ct2 = constant for term 2
c ct3 = constant for term 3
         do i = 1, 6
            Q(i) = sqrt(4.d0*c(i)-b(i)*b(i))
            ct1(i) = A(i)
            ct2(i) =-A(i)*b(i)*x0(i)/(x0(i)*x0(i)+b(i)*x0(i)+c(i))
            ct3(i) = A(i)*(2.d0*b(i)/Q(i))
     &           * ((c(i)-x0(i)*x0(i))/(x0(i)*x0(i)+b(i)*x0(i)+c(i)))
c           Convert interpolation formulas from Rydberg to Hartree units
            ct1(i) = 0.5D0*ct1(i)
            ct2(i) = 0.5D0*ct2(i)
            ct3(i) = 0.5D0*ct3(i)
         enddo
#if defined(FNL_VWN_1_RPA) || defined(FNL_VWN_5_RPA)
c        Copy RPA over Monte Carlo for all parameters
         call dcopy(3, A(4), 1, A(1), 1)
         call dcopy(3, b(4), 1, b(1), 1)
         call dcopy(3, c(4), 1, c(1), 1)
         call dcopy(3, x0(4), 1, x0(1), 1)
         call dcopy(3, Q(4), 1, Q(1), 1)
         call dcopy(3, ct1(4), 1, ct1(1), 1)
         call dcopy(3, ct2(4), 1, ct2(1), 1)
         call dcopy(3, ct3(4), 1, ct3(1), 1)
#endif
c        The appropriate spin stiffness parameters are always assumed
c        to be in slot 3 - these start out as the Monte Carlo values,
c        so copy RPA values here when RPA is actually used for this
#if defined(FNL_VWN_2) || defined(FNL_VWN_3) || defined(FNL_VWN_4)
         A(3) = A(6)
         b(3) = b(6)
         c(3) = c(6)
         x0(3) = x0(6)
         Q(3) = Q(6)
         ct1(3) = ct1(6)
         ct2(3) = ct2(6)
         ct3(3) = ct3(6)
#endif
      endif
c
c     ======> BOTH SPIN-RESTRICTED AND SPIN-UNRESTRICTED <======
c
      do 200 n = 1, nq
         rhoval = 0.0d0
         if (rho(n,R_A).ge.0.5d0*tol_rho) then
           rhoval = rhoval + rho(n,R_A)
         endif
         if (ipol.eq.2) then
           if (rho(n,R_B).ge.0.5d0*tol_rho) then
             rhoval = rhoval + rho(n,R_B)
           endif
         endif
c
         if (rhoval.lt.tol_rho) goto 200
c
c Daniel (5-23-12): Check the density at the quadrature point against
c the tolerance.  rs => Wigner-Seitz radius
         if (rhoval.gt.tol_rho) then
            rs = p0*rhoval**(-onethird)
         else
            rs=0d0
         endif
c Daniel (5-23-12): x = rs**{1/2} is defined under Eq. [4.3] in VWN.
c d1rs => 1st derivative of rs with respect to rho
c d1x => 1st derivative of x with respect to rs
c        d1rs = -onethird*rs/rhoval
         x = sqrt(rs)
c        d1x = 0.5d0/x
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c Daniel (5-23-12)
c d2rs => 2nd derivative of rs with respect to rho
c d2x => 2nd derivative of x with respect to rs
c        d2rs = -fourthirds*d1rs/rhoval
c        d2x = -0.5d0*d1x/rs
#endif
#if defined(THIRD_DERIV)
c Daniel (5-23-12): Third order derivative stuff
c        d3rs = -seventhirds*d2rs/rhoval 
c        d3x = -threehalf*d2x/rs 
#endif
c
c        Evaluate the individual correlation energy formulas
c
c Daniel (5-28-12): Road map to the variables
c rchi = reciprocal of chi
c d1chi = derivative of chi with respect to x
c s = stuff inside of inverse tangent
c t1 = first logarithm
c t2 = second logarithm
c t3 = both inverse tangents
         do i = 1, N_EPS
            rchi = 1.0d0/(rs + b(i)*x + c(i))
            d1chi = 2.0d0*x + b(i)
            s = Q(i)/d1chi
c           d1s = -2.0d0*s/d1chi
            t1 = log(abs(rs*rchi))
            t2 = (x - x0(i))*(x - x0(i))*rchi
            t2 = log(abs(t2))
            t3 = atan(s)
c d1t1 = derivative of the first term
c d1t2 = derivative of the second term
c d1t3 = derivative of the third term
c           d1t1 = 2.0d0/x - d1chi*rchi
c           d1t2 = 2.0d0/(x-x0(i)) - d1chi*rchi
c           d1t3 = d1s/(1.0d0 + s*s)
c e(i) is the correlation energy per particle
c d1e(i) is the derivative of the correlation energy per particle
            e(i) = ct1(i)*t1 + ct2(i)*t2 + ct3(i)*t3
c           d1e(i) = ct1(i)*d1t1 + ct2(i)*d1t2 + ct3(i)*d1t3
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c           d2s = -4.d0*d1s/d1chi
c           d2t1 =-2.0d0/rs + (d1chi*rchi)**2 - 2.d0*rchi
c           d2t2 =-2.0d0/(x-x0(i))**2 + (d1chi*rchi)**2 - 2.d0*rchi
c           d2t3 = (d2s - 2.d0*s*d1s*d1t3)/(1.0d0 + s*s)
c d2e(i) is the second derivative of the correlation energy per particle
c           d2e(i) = ct1(i)*d2t1 + ct2(i)*d2t2 + ct3(i)*d2t3
#endif
#if defined(THIRD_DERIV)
c Daniel (5-29-12): Third order derivative stuff
c            d3s = -6.0d0*d2s/d1chi
c Might be better to implement this using the following, so that we 
c don't rely on the second derivative being defined:
c           d3s = 24.0d0*d1s/(d1chi*d1chi)
c           d3t1 = 4.0d0/x**3 + 6.0d0*d1chi*rchi*rchi
c    &        - 2.0d0*(d1chi*rchi)**3
c           d3t2 = 4.0d0/(x-x0(i))**3 + 6.0d0*d1chi*rchi*rchi
c    &        - 2.0d0*(d1chi*rchi)**3
c           d3t3 = (d3s + (6.0d0*s*s-2.0d0)*d1s*d1t3*d1t3 
c    &        - 6.0d0*s*d2s*d1t3)/(1.0d0 + s*s)
c           d3e(i) = ct1(i)*d3t1 + ct2(i)*d3t2 + ct3(i)*d3t3
#endif
c
c           Transform derivatives wrt x to derivatives wrt rs
c
#if defined(THIRD_DERIV)
c Daniel (5-29-12): Third order derivative stuff
c Need to do this first because we need the first and second order
c derivatives with respect to x that aren't replaced.
c           d3e(i) = d3e(i)*d1x*d1x*d1x + 3.0d0*d2e(i)*d1x*d2x
c    &        + d1e(i)*d3x
#endif
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c           Do 2nd derivative first so the x first derivative in d1e
c           is not lost
c           d2e(i) = d2e(i)*d1x*d1x + d1e(i)*d2x
#endif
c           d1e(i) = d1e(i)*d1x
         enddo
c
c        Compute the polarization function and its derivatives
c
c Daniel (5-29-12): The spin polarization function is defined as
c the alpha-density minus the beta-density divided by the total density
c This is nonzero only if an open-shell calculation is performed.
         if (ipol.eq.1) then
            zeta = 0.0d0
         else
            zeta = (rho(n,R_A) - rho(n,R_B))/rhoval
         endif
c By definition, zeta should be between -1 and 1.
         if (zeta.ge.1.d0)then
            zeta = 1.d0
         elseif (zeta.le.-1.d0)then
            zeta =-1.d0
         endif
c Daniel (5-29-12): This is [2.3] in VWN.
         fz = -2.0d0
         if (1.0d0+zeta.gt.1.0d-10) then
           fz = fz + (1.d0+zeta)**fourthirds
         endif
         if (1.0d0-zeta.gt.1.0d-10) then
           fz = fz + (1.d0-zeta)**fourthirds
         endif
         fz = p1*fz
c        fz = ((1.d0+zeta)**fourthirds + 
c    &         (1.d0-zeta)**fourthirds - 2.d0)*p1
c Daniel (5-29-12): Derivative of f[zeta] with respect
c to zeta.
c        d1fz = ((1.d0+zeta)**onethird - 
c    &           (1.d0-zeta)**onethird)*p2
c Daniel (5-29-12): Derivatives of zeta with respect to the 
c spin-densities (1 = alpha, 2 = beta)
c        d1zeta(1) = (1.d0-zeta)/rhoval
c        d1zeta(2) =-(1.d0+zeta)/rhoval
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c Daniel (5-29-12): If zeta is less than the tolerance on the
c electron density, we insert zeta=0 into the equation.
c        if(dabs(zeta).lt.tol_rho) then
c           d2fz = d2fz0 
c        else
c Daniel (5-29-12): If zeta is ~ -1 or ~ +1, we can have a problem with
c numerical inaccuracy.  This part screens for that situation.
c           if (dabs(zeta+1.d0).le.tol_rho) then
c             d2fz = ((1.d0-zeta)**(-twothirds))*p3
c           else if (dabs(zeta-1.d0).le.tol_rho) then
c             d2fz = ((1.d0+zeta)**(-twothirds))*p3
c           else
c             d2fz = ((1.d0+zeta)**(-twothirds) +
c    &                (1.d0-zeta)**(-twothirds))*p3
c           endif
c        endif
c        rrho2 = 2.d0/(rhoval*rhoval)
c        1 = aa, 2 = ab, 3 = bb
c        d2zeta(1) =-rrho2*(1.d0-zeta)
c        d2zeta(2) = rrho2*zeta
c        d2zeta(3) = rrho2*(1.d0+zeta)
#endif
c
c Daniel (5-29-12): Third order derivatives of spin polarization stuff
#ifdef THIRD_DERIV
c        if (dabs(zeta+1.0d0).le.tol_rho) then
c          d3fz = (-(1.0d0-zeta)**(-fivethirds))*p4 
c        else if (dabs(zeta-1.0d0).le.tol_rho) then
c          d3fz = ((1.0d0+zeta)**(-fivethirds))*p4
c        else
c          d3fz = ((1.0d0+zeta)**(-fivethirds) -
c    &             (1.0d0-zeta)**(-fivethirds))*p4
c        end if          
c        rrho3 = 1.0d0/(rhoval*rhoval*rhoval) 
c 1 = aaa, 2 = aab, 3 = abb, 4 = bbb
c        d3zeta(1) = 6.0d0*(1.0d0-zeta)*rrho3
c        d3zeta(2) = 2.0d0*(1.0d0-3.0d0*zeta)*rrho3
c        d3zeta(3) = -2.0d0*(1.0d0+3.0d0*zeta)*rrho3
c        d3zeta(4) = -6.0d0*(1.0d0+3.0d0*zeta)*rrho3
#endif
         dec_rs1 = e(2)-e(1)
c        d1dec_rs1 = d1e(2)-d1e(1)
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c        d2dec_rs1 = d2e(2)-d2e(1)
#endif
#ifdef NEED_RPA_RS1
         derpa_rs1 = e(5)-e(4)
c        d1derpa_rs1 = d1e(5)-d1e(4)
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c        d2derpa_rs1 = d2e(5)-d2e(4)
#endif
c Daniel (5-29-12): Third order derivative of Delta[epsilon_RPA]
#if defined(THIRD_DERIV)
c        d3derpa_rs1 = d3e(5)-d3e(4)
#endif
#endif
c
c Daniel (5-29-12): This part deals with the functional form of
c Delta[epsilon]
#ifdef USE_VWN_DEC
c Delta[espilon](rs,1) in Eq. [4.8] in VWN and its derivative
         beta_rs1 = e(BETA_SET_RS1+1)-e(BETA_SET_RS1)
c        d1beta_rs1 = d1e(BETA_SET_RS1+1)-d1e(BETA_SET_RS1)
c        zeta2 = zeta*zeta
c        zeta3 = zeta2*zeta
         zeta4 = zeta**4
c Eq. [4.8] in VWN and its derivative with respect to rs
         t_vwn = d2fz0*beta_rs1-e(3)
c        d1t_vwn = d2fz0*d1beta_rs1-d1e(3)
c Delta[epsilon_{VWN}](rs,zeta)
         devwn_rsz = fz/d2fz0*(e(3)+t_vwn*zeta4)
c Derivatives: 1 = drs, 2 = dzeta
c        d1devwn_rsz(1) = fz/d2fz0*(d1e(3)+d1t_vwn*zeta4)
c        d1devwn_rsz(2) = d1fz/d2fz0*(e(3)+t_vwn*zeta4)
c    &        + fz/d2fz0*t_vwn*4.d0*zeta3
#if defined(SECOND_DERIV) || defined(THIRD_DERIV)
c        d2beta_rs1 = d2e(BETA_SET_RS1+1)-d2e(BETA_SET_RS1)
c        d2t_vwn = d2fz0*d2beta_rs1-d2e(3)
c Derivatives: 1 = drsdrs, 2 = drsdzeta, 3 = dzetadzeta
c        d2devwn_rsz(1) = fz/d2fz0*(d2e(3)+d2t_vwn*zeta4)
c        d2devwn_rsz(2) = d1fz/d2fz0*(d1e(3)+d1t_vwn*zeta4)
c    &        + fz/d2fz0*d1t_vwn*4.d0*zeta3
c        d2devwn_rsz(3) = d2fz/d2fz0*(e(3)+t_vwn*zeta4)
c    &        + d1fz/d2fz0*t_vwn*8.d0*zeta3
c    &        + fz/d2fz0*t_vwn*12.d0*zeta2
#endif
c Daniel (5-30-12): Third order derivative stuff
#ifdef THIRD_DERIV
c        d3beta_rs1 = d3e(BETA_SET_RS1+1)-d3e(BETA_SET_RS1) 
c        d3t_vwn = d2fz0*d3beta_rs1-d3e(3)
c Derivatives: 1 = drsdrsdrs, 2 = drsdrsdzeta, 3 = drsdzetadzeta,
c              4 = dzetadzetadzeta
c        d3devwn_rsz(1) = fz/d2fz0*(d3e(3)+d3t_vwn*zeta4)
c        d3devwn_rsz(2) = d1fz/d2fz0*(d2e(3)+d2t_vwn*zeta4)
c    &        + fz/d2fz0*d2t_vwn*4.0d0*zeta3
c        d3devwn_rsz(3) = d2fz/d2fz0*(d1e(3)+d1t_vwn*zeta4)
c    &        + d1fz/d2fz0*d1t_vwn*8.0d0*zeta3
c    &        + fz/d2fz0*d1t_vwn*12.0d0*zeta2
c        d3devwn_rsz(4) = d3fz/d2fz0*(e(3)+t_vwn*zeta4)
c    &        + d2fz/d2fz0*t_vwn*12.0d0*zeta3
c    &        + d1fz/d2fz0*t_vwn*36.0d0*zeta2
c    &        + fz/d2fz0*t_vwn*24.0d0*zeta
#endif
#endif
c
c --- Functional-dependent unrestricted part, deltaEc(rs,zeta),
c --- goes in the .F file after inclusion of this header
